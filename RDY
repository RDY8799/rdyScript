#!/bin/bash

clear
if [ $(id -u) -eq 0 ]
then
	clear
else
	if echo $(id) |grep sudo > /dev/null
	then
	clear
	echo -e "\033[1;37mVocê não é root"
	echo -e "\033[1;37mSeu usuário está no grupo sudo"
	echo -e "\033[1;37mPara tornar-se um usuário root execute \033[1;31msudo su\033[1;37m ou execute \033[1;31msudo $0\033[0m"
	exit
	else
	clear
	echo -e "Você não está como usuario root, nem com seus direitos (sudo)\nPara tornar-se um usuário root execute \033[1;31msu\033[0m e digite sua senha root"
	exit
	fi
fi

# SETTINGS

about="© RDY SOFTWARE | 2016 - 2018 All rights reserved";

cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/	//' > /etc/so 

ip=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
if [[ "$ip" = "" ]]; then

ip=$(wget -qO- ipv4.icanhazip.com)

fi

#####-------######------#####-----####

passwordrdy(){
error="Invalid password!\nPlease try again.\n\n\033[1;36mPossible causes for this error:\033[1;37m\nYou have entered the wrong password.\nYour password has expired.\nYou are not registered.\033[1;32m\nIf you do not have a password, send an email to \033[1;37m$email\033[0m\033[1;32m and request a password."

caracteres="No special characters like *, #, & etc. are allowed."

about="© RDY SOFTWARE | 2016 - 2018 All rights reserved "
email="rdysoftware@gmail.com"
rdy="/etc/a/b/c/d/e/f/g/h/i/j/k/0/1/2/3/4/5/6/7/8/9/m/n/o/p/q/r/s/t/u/v/w/x/y/z/rdy/$ip"

echo ""
echo -e "\033[46;1;37m$about\033[0m"
echo ""
echo -e "\033[42;1;37mACESS PASSWORD\033[0m"
echo ""
echo -e "\033[1;36m[1/3] Type your password: \033[0m"; read -p "" senha

if [[ -z $senha ]]
then
echo ""
echo -e "\033[1;31mYou left the empty space one entered a nonexistent password.\033[0m"
exit
else
if (echo $senha | egrep [^a-zA-Z0-9] &> /dev/null)
then

echo -e "\033[1;31m\n(ERROR 01) $error\033[0m"
rm $rdy > /dev/null 2> /dev/null
else

echo " ";

fi
if [[ `grep -c "^$senha" $rdy` -ne 1 ]]
then
echo ""
echo -e "\033[1;31m\n(ERROR 02) $error \nfiaracteres\033[0m"
#rm $rdy > /dev/null 2> /dev/null
echo ""
exit
else
echo ""
echo -e "\033[1;36m\033[1;32m√ \033[0mValid password!\033[0m"

okfile="/etc/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/"
if [  -d $okfile  ]; then
echo " ";
else
mkdir -p $okfile
fi

echo "$senha  #     $ip   ---   Louvado Seja Deus O Senhor!" > /etc/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/rdyOOOok
fi
fi
#####-------######------#####-----####

sleep 2

}


file="/etc/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/rdyOOOok"

if [ -e "$file" ]
then
echo "ok"
else
passwordrdy
fi

# RDY FUNCTIONS

rdylampsettings(){

echo -e "\033[1;32mAtualizando pacotes... \033[0m";
apt-get update > /dev/null 2> /dev/null

clear
echo -e "\033[1;32m Install apache? \033[0m"; read -p "[s/n]: " -e -i s apache
echo " ";
echo -e "\033[1;32m Install MySQL Server? \033[0m"; read -p "[s/n]: " -e -i s mysql
echo " ";
echo -e "\033[1;32m Install PHP5?\033[0m"; read -p "[s/n]: " -e -i s php5


if [[ "$apache" = 's' ]]; then
echo -e "\033[1;32m Installing Apache... \033[0m";
apt-get install apache2
fi
if [[ "$mysql" = 's' ]]; then
echo -e "\033[1;32m Installing MySQL Server... \033[0m";
apt-get install mysql-server php5-mysql

echo -e "\033[1;32m Setting MySQL Server... \033[0m";
mysql_install_db
mysql_secure_installation
fi

if [[ "$php5" = 's' ]]; then
echo -e "\033[1;32m Intalling PHP5...\033[0m";
apt-get install php5 libapache2-mod-php5 php5-mcrypt
fi

if [[ "$apache" = 's' ]]; then
echo -e "\033[1;32m Configuring Apache... \033[0m";
rm /etc/apache2/mods-enabled/dir.conf > /dev/null

echo "<IfModule mod_dir.c>
    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
</IfModule>" > /etc/apache2/mods-enabled/dir.conf

echo -e "\033[1;32m Restarting Apache...\033[0m";
service apache2 restart
fi


echo "<?php
phpinfo();
?>" > /var/www/html/info.php
clear
echo "";
echo -e "\033[1;32mFinish √\033[0m";
echo "";
echo "Test: http://$ip/info.php"
echo "";
echo "SOURCE: https://www.digitalocean.com/community/tutorials/como-instalar-a-pilha-linux-apache-mysql-php-lamp-no-ubuntu-14-04-pt";
echo "";

}

rdyconfigdropbear(){
echo "$about";

}

sshd_config(){ echo "# © RDY SOFTWARE | 2016 - 2017 All rights reserved
#
Port 22
Port 443
Protocol 2
KeyRegenerationInterval 3600
ServerKeyBits 1024
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 120
PermitRootLogin yes
StrictModes yes
RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
PasswordAuthentication yes
X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
#UseLogin no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
UsePAM yes" > /etc/ssh/sshd_config
}

rdyopenssh(){

apt-get --reinstall install python-minimal

clear

echo " " >> /etc/sysctl.conf
echo "#RDY" >> /etc/sysctl.conf
echo "net.ipv4.tcp_window_scaling = 1
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 16384 16777216
net.ipv4.tcp_low_latency = 1
net.ipv4.tcp_slow_start_after_idle = 0" >> /etc/sysctl.conf
echo ""
/sbin/sysctl -p /etc/sysctl.conf
echo ""
clear

rm /root/*nstal* > /dev/null
clear
echo ""
echo -e "\033[1;36m[3/3] Deseja ativar a compressão SSH? \033[0m";
read -p "[s/n] : " -e -i s sshcompression
echo ""

clear
echo ""
echo -e "\033[1;32m√ \033[01;37mRDY SOFTWARE\033[0m"
echo -e "\033[1;32m√ \033[01;37mCANAL:\033[1;31m@rdysoftware"
echo -e "\033[1;32m√ \033[01;37mPARA OS SISTEMAS:\033[1;31mDebian, Ubunto, Centos"
echo -e "\033[1;32m√ \033[01;37mSISTEMA OPERACIONAL:\033[1;31m $(cat /etc/so)"
echo -e "\033[1;32m√ \033[01;37mIP:\033[1;31m $ip"
echo -e "\033[1;32m√ \033[1;37mPORTAS PROXY:\033[1;31m 80, 8080, 8799, 3128\033[0m"
echo -e "\033[1;32m√ \033[1;37mSSH NAS PORTAS: \033[1;31m443, 22\033[0m"
echo -e "\033[1;32m√ \033[1;37mSSH NOS IPS: \033[1;31m$ip, localhost, 127.0.0.1\033[0m"
echo ""
echo -e "\033[1;32m√ \033[1;37mMensagem: Louvai ao Senhor todos os povos da terra, porque sua misericórdia dura para sempre!\033[0m"
echo""

function payloads(){ echo "www.speedtest.net
.speedtest.
telegram.me/MegaTunelVPS" > /etc/payloads
}

if [[ "$sshcompression" = 's' ]]; then
	grep -v "^Compression yes" /etc/ssh/sshd_config > /tmp/sshcp && mv /tmp/sshcp /etc/ssh/sshd_config
	echo "Compression yes" >> /etc/ssh/sshd_config
fi

if [[ "$sshcompression" = 'n' ]]; then
	grep -v "^Compression yes" /etc/ssh/sshd_config > /tmp/sshcp && mv /tmp/sshcp /etc/ssh/sshd_config
fi

if cat /etc/so |grep -i ubuntu |grep 16 1> /dev/null 2> /dev/null ; then
echo -e "\033[1;37mConfigurando...\033[0m"
sleep 2s
echo -e "\033[1;37mInstalando atualizações...\033[0m"
apt-get update 1> /dev/null 2> /dev/null
echo -e "\033[1;37mConfigurando squid proxy...\033[0m"

apt-get install -y squid3 1> /dev/null 2> /dev/null

apt-get install -y nano 1> /dev/null 2> /dev/null

apt-get install figlet -y 1> /dev/null 2> /dev/null

service apache2 stop 1> /dev/null 2> /dev/null
sshd_config
service ssh restart 1> /dev/null 2> /dev/null
echo -e "\033[1;37mTerminando...\033[0m"
sleep 2s
echo "http_port 80
http_port 8080
http_port 8799
http_port 3128
visible_hostname RDYSOFTWARE
acl ip dstdomain $ip
http_access allow ip" > /etc/squid/squid.conf
echo 'acl accept dstdomain -i "/etc/payloads"
http_access allow accept
acl local dstdomain localhost
http_access allow local
acl iplocal dstdomain 127.0.0.1
http_access allow iplocal
http_access deny all' >> /etc/squid/squid.conf

echo -e "\033[1;32m Finish √ \033[0m";

history -c
exit 0
fi

if cat /etc/so |grep -i ubuntu 1> /dev/null 2> /dev/null ; then
echo -e "\033[1;37mConfigurando...\033[0m"
sleep 2s
echo -e "\033[1;37mInstalando atualizações...\033[0m"
apt-get update 1> /dev/null 2> /dev/null
echo -e "\033[1;37mConfigurando squid proxy...\033[0m"
apt-get install -y squid3 1> /dev/null 2> /dev/null

apt-get install figlet -y 1> /dev/null 2> /dev/null

apt-get install -y nano 1> /dev/null 2> /dev/null

service apache2 stop 1> /dev/null 2> /dev/null
sshd_config
service ssh restart 1> /dev/null 2> /dev/null
echo -e "\033[1;37mTerminando...\033[0m"
sleep 2s
echo "http_port 80
http_port 8080
http_port 8799
http_port 3128
visible_hostname RDYSOFTWARE
acl ip dstdomain $ip
http_access allow ip" > /etc/squid3/squid.conf
echo 'acl accept dstdomain -i "/etc/payloads"
http_access allow accept
acl local dstdomain localhost
http_access allow local
acl iplocal dstdomain 127.0.0.1
http_access allow iplocal
http_access deny all' >> /etc/squid3/squid.conf
payloads
service squid3 restart 1> /dev/null 2> /dev/null

echo -e "\033[1;32m Finish √ \033[0m";

history -c
exit 0
fi

if cat /etc/so |grep -i centos 1> /dev/null 2> /dev/null ; then
echo -e "\033[01;37mConfigurando...\033[0m"
sleep 2s
echo -e "\033[1;37mInstalando atualizações...\033[0m"
yum -y update 1> /dev/null 2> /dev/null

yum install -y squid 1> /dev/null 2> /dev/null
echo -e "\033[1;37mConfigurando squid proxy...\033[0m"
service httpd stop 1> /dev/null 2> /dev/null

sshd_config
service sshd restart 1> /dev/null 2> /dev/null
echo -e "\033[1;37mTerminando...\033[0m"
sleep 2s
echo "http_port 80
http_port 8080
http_port 8799
http_port 3128
visible_hostname RDYSOFTWARE
acl ip dstdomain $ip
http_access allow ip" > /etc/squid/squid.conf
echo 'acl accept dstdomain -i "/etc/payloads"
http_access allow accept
acl local dstdomain localhost
http_access allow local
acl iplocal dstdomain 127.0.0.1
http_access allow iplocal
http_access deny all' >> /etc/squid/squid.conf
payloads
service squid restart 1> /dev/null 2> /dev/null

echo -e "\033[1;32m Finish √ \033[0m";
history -c
exit
fi

if cat /etc/so |grep -i debian 1> /dev/null 2> /dev/null ; then
echo -e "\033[01;37mConfigurando...\033[0m"
echo -e "\033[1;37mInstalando atualizações...\033[0m"
apt-get update 1> /dev/null 2> /dev/null

apt-get install -y squid3 1> /dev/null 2> /dev/null

apt-get install -y nano 1> /dev/null 2> /dev/null

apt-get install figlet -y 1> /dev/null 2> /dev/null

echo -e "\033[1;37mConfigurando squid proxy...\033[0m"
service apache2 stop 1> /dev/null 2> /dev/null

sshd_config

service ssh restart 1> /dev/null 2> /dev/null
echo -e "\033[1;37mTerminando...\033[0m"
sleep 2s
echo "http_port 80
http_port 8080
http_port 8799
http_port 3128
visible_hostname RDYSOFTWARE
acl ip dstdomain $ip
http_access allow ip" > /etc/squid3/squid.conf
echo 'acl accept dstdomain -i "/etc/payloads"
http_access allow accept
acl local dstdomain localhost
http_access allow local
acl iplocal dstdomain 127.0.0.1
http_access allow iplocal
http_access deny all' >> /etc/squid3/squid.conf
payloads
service squid3 restart 1> /dev/null 2> /dev/null

echo -e "\033[1;32m Finish √ \033[0m";
history -c
exit 0
fi



if cat /etc/issue |grep -i kernel 1> /dev/null 2> /dev/null ; then
echo -e "\033[01;31mConfigurando...\033[0m"
sleep 2s
echo -e "\033[1;37mInstalando atualizações...\033[0m"
yum -y update 1> /dev/null 2> /dev/null

yum install -y squid 1> /dev/null 2> /dev/null
echo -e "\033[1;37mConfigurando squid proxy...\033[0m"
service httpd stop 1> /dev/null 2> /dev/null

sshd_config
service sshd restart 1> /dev/null 2> /dev/null
echo -e "\033[1;37mTerminando...\033[0m"
sleep 2s
echo "http_port 80
http_port 8080
http_port 8799
http_port 3128
visible_hostname RDYSOFTWARE
acl ip dstdomain $ip
http_access allow ip" > /etc/squid/squid.conf
echo 'acl accept dstdomain -i "/etc/payloads"
http_access allow accept
acl local dstdomain localhost
http_access allow local
acl iplocal dstdomain 127.0.0.1
http_access allow iplocal
http_access deny all' >> /etc/squid/squid.conf
payloads
service squid restart 1> /dev/null 2> /dev/null

echo -e "\033[1;32m Finish √ \033[0m";
exit
fi

echo -e "\033[01;31mConfigurando...\033[0m"
sleep 2s
echo -e "\033[1;37mInstalando atualizações...\033[0m"
yum -y update 1> /dev/null 2> /dev/null
yum install -y squid 1> /dev/null 2> /dev/null
echo -e "\033[1;37mInstalando atualizações...\033[0m"
apt-get update > /dev/null 2> /dev/null

echo -e "\033[1;37mConfigurando squid proxy...\033[0m"
apt-get install -y squid3 > /dev/null 2>/dev/null
service httpd stop 1> /dev/null 2> /dev/null
service apache2 stop >/dev/null 2> /dev/null
sshd_config
service sshd restart 1> /dev/null 2> /dev/null
service ssh restart > /dev/null 2> /dev/null
echo -e "\033[1;37mTerminando...\033[0m"
sleep 2s
echo "http_port 80
http_port 8080
http_port 8799
http_port 3128
visible_hostname RDYSOFTWARE
acl ip dstdomain $ip
http_access allow ip" > /etc/squid*/squid.conf
echo 'acl accept dstdomain -i "/etc/payloads"
http_access allow accept
acl local dstdomain localhost
http_access allow local
acl iplocal dstdomain 127.0.0.1
http_access allow iplocal
http_access deny all' >> /etc/squid*/squid.conf
payloads
service squid restart 1> /dev/null 2> /dev/null
service squid3 restart > /dev/null 2> /dev/null

echo -e "\033[1;32m Finish √ \033[0m";


}

rdydropbear(){

clear

echo ""

echo -e "\033[4;36m$about\033[0m"

echo ""

echo -e "\033[1;36mIniciando configuração DropBear\033[0m"
echo ""

sleep 2

echo -e "\033[1;32mQual porta deseja usar? (Padrão: 22, 443) \033[0m"

read -p "PORTA: " -e -i 80 pts
if [ "$pts" = "" ]; then
porta="80"
else
 if [ "$pts" = "22" ]; then
echo -e "\033[1;31mPORTA 22 DESTINADA A GERENCIAMENTO DA VPS\033[0m"
 else
   if [ "$pts" = "443" ]; then
echo -e "\033[1;31mPORTA 443 JA VEM ABERTA!\033[0m"
porta="80"
 else
porta="$pts"
    fi
  fi
fi
echo "$porta" >> /tmp/portas
echo "443" >> /tmp/portas

echo -e "\033[1;31mConfigurando... \033[0m"

apt-get update > /dev/null 2> /dev/null
apt-get install dropbear > /dev/null 2> /dev/null

touch /etc/dropbear/banner
printf "#loading\nNO_START=0\nDROPBEAR_PORT=$porta\n" > /etc/default/dropbear
echo -e 'DROPBEAR_EXTRA_ARGS="-p 443"' >> /etc/default/dropbear

service dropbear restart > /dev/null 2> /dev/null

echo "/bin/false" > /etc/shells > /dev/null 2> /dev/null

service dropbear restart > /dev/null 2> /dev/null

/etc/init.d/dropbear restart > /dev/null 2> /dev/null

echo -e "\033[1;32mConcluído! \033[0m"

}

rdysocks(){

clear

echo ""

echo -e "\033[4;36m$about\033[0m"

echo ""

echo -e "\033[1;36mStart PythonSocks\033[0m"
echo ""
echo -e "\033[1;31mVerificando... \033[0m"

sleep 2

abobora=/bin/
verde=proxy.py
rosa=proxy8080.py
preto=proxy8799.py
azul=proxy3128.py

sshd_config

if [ -e "$abobora$verde" ] ; then
echo -e "\033[1;32mPort 80 OK √ \033[0m"
history -c
else
echo -e "\033[1;31mBaixando arquivos para porta 80...\033[0m"
wget -P /bin https://raw.githubusercontent.com/RDY8799/SSHNation/master/proxy.py > /dev/null 2> /dev/null
history -c
fi

if [ -e "$abobora$rosa" ] ; then
echo -e "\033[1;32mPort 8080 OK √ \033[0m"
history -c
else
echo -e "\033[1;31mBaixando arquivos para porta 8080...\033[0m"
wget -P /bin https://raw.githubusercontent.com/RDY8799/SSHNation/master/proxy8080.py > /dev/null 2> /dev/null
history -c
fi

if [ -e "$abobora$preto" ] ; then
echo -e "\033[1;32mPort 8799 OK √ \033[0m"
history -c
else
echo -e "\033[1;31mBaixando arquivos para porta 8799...\033[0m"
wget -P /bin https://raw.githubusercontent.com/RDY8799/SSHNation/master/proxy8799.py > /dev/null 2> /dev/null
history -c
fi

if [ -e "$abobora$azul" ] ; then
echo -e "\033[1;32mPort 3128 OK √ \033[0m"
history -c
else
echo -e "\033[1;31mBaixando arquivos para porta 3128...\033[0m"
wget -P /bin https://raw.githubusercontent.com/RDY8799/SSHNation/master/proxy3128.py > /dev/null 2> /dev/null
history -c
fi

sleep 2

echo ""

echo -e "\033[1;31mRESPONDA ALGUMAS PERGUNTAS \033[0m"
echo ""

echo -e "\033[1;32mAbrir porta 80? \033[0m"
read -p "[s/n]: " -e -i s port80

echo -e "\033[1;32mAbrir porta 8080? \033[0m"
read -p "[s/n]: " -e -i s port8080

echo -e "\033[1;32mAbrir porta 8799? \033[0m"
read -p "[s/n]: " -e -i n port8799

echo -e "\033[1;32mAbrir porta 3128? \033[0m"
read -p "[s/n]: " -e -i s port3128

service squid3 stop > /dev/null 2> /dev/null
service squid stop > /dev/null 2> /dev/null
service ssh restart > /dev/null 2> /dev/null
service sshd restart > /dev/null 2> /dev/null

if [[ "$port80" = 's' ]]; then
chmod a+x /bin/proxy.py && nohup python /bin/proxy.py > proxy.txt &
fi

if [[ "$port8080" = 's' ]]; then
chmod a+x /bin/proxy8080.py && nohup python /bin/proxy8080.py > proxy8080.txt &
fi


if [[ "$port8799" = 's' ]]; then
chmod a+x /bin/proxy8799.py && nohup python /bin/proxy8799.py > proxy8799.txt &
fi


if [[ "$port3128" = 's' ]]; then
chmod a+x /bin/proxy3128.py && nohup python /bin/proxy3128.py > proxy3128.txt &
fi
echo ""
echo -e "\033[1;32mTudo pronto! \n\nCanal: http://t.me/rdysoftware \033[0m"

}

rdystartgettunnel(){
if [ -e "/bin/server8799.py" ] ; then
echo -e "\033[1;32mPort 8799 OK √ \033[0m"
history -c
else
echo -e "\033[1;31mBaixando arquivos para porta 8799...\033[0m"
wget -P /bin https://raw.githubusercontent.com/RDY8799/SSHNation/master/server8799.py > /dev/null 2> /dev/null
history -c
fi

echo ""

echo -e "\033[1;33mApenas a porta 8799 a ser aberta.\n\nEdite o arquivo encontrado em \033[1;31m/bin/server8799.py\033[1;33m e coloque a porta desejada \033[0m"

echo ""

echo -e "\033[1;32mIniciar GetTunnel na porta 8799? \033[0m"
read -p "[s/n]: " -e -i n server8799


if [[ "$server8799" = 's' ]]; then
chmod a+x /bin/server8799.py && nohup python /bin/server8799.py > server8799.txt &
fi
}

rdystartport(){

echo ""
echo -e "\033[1;32mSeu arquivo deve está em \033[1;31m/bin \033[0m"
echo ""
echo -e "\033[1;32mCertifique-se que não exista a mesma porta aberta no servidor \033[0m"
echo ""
echo -e "\033[1;36mNome do arquivo Python: \033[0m"; read -p ""  filepy
echo ""

if [ ! -f "/bin/$filepy" ]; then
echo -e "\033[1;31m$filepy não encontrado em /bin \033[0m"
else
chmod a+x /bin/$filepy && nohup python /bin/$filepy > $filepy.txt &
fi

echo -e "\033[1;32mConcluído! \033[0m"

echo ""
}

rdygettunnel(){
clear
echo ""
echo -e "\033[4;36m$about \033[0m"

echo ""

echo -e "\033[1;32m[1] Iniciar GetTunnel (Default port 8799)\033[0m";
echo -e "\033[1;32m[2] Iniciar em novas portas \033[0m";
echo -e "\033[1;36m[01-02]\033[0m"; read -p ": "  option

case $option in

1 | 01) rdystartgettunnel ;;
2 | 02) rdystartport ;;
*) "Unknown option." ; echo ; sleep 2 ; RDY ;;
   esac

}

rdybadvpn(){

clear
echo ""
echo -e "\033[4;36m$about\033[0m"

echo ""

echo -e "\033[1;32mConfigurando, aguarde...\033[0m"

apt-get install -y gcc >/dev/null 2>/dev/null
apt-get install -y make >/dev/null 2>/dev/null
apt-get install -y g++ >/dev/null 2>/dev/null
apt-get install -y openssl >/dev/null 2>/dev/null
apt-get install -y build-essential >/dev/null 2>/dev/null
apt-get install -y cmake >/dev/null 2>/dev/null

echo -e "\033[1;32mBaixando arquivos BadVPN..."; cd
wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/badvpn/badvpn-1.999.128.tar.bz2 -o /dev/null
history -c
tar -xf badvpn-1.999.128.tar.bz2
echo -e "Iniciando configurações..."
mkdir /etc/badvpn-install
cd /etc/badvpn-install
cmake ~/badvpn-1.999.128 -DBUILD_NOTHING_BY_DEFAULT=1 -DBUILD_UDPGW=1 >/dev/null 2>/dev/null
echo -e "\033[1;32mConcluindo... \033[0m"
make install
clear

rm -rf /etc/badvpn-install
cd ; rm -rf badvpn.sh badvpn-1.999.128/ badvpn-1.999.128.tar.bz2 >/dev/null 2>/dev/null

clear

echo -e "\033[4;36m$about\033[0m"

echo ""

echo -e "\033[1;32m√ Concluído! √ \033[0m"
echo ""

}

rdyspeedtest(){

clear
echo ""
echo -e "\033[4;36m$about\033[0m"

echo ""

if [ -e "/bin/speedtest.py" ] ; then
echo -e "\033[1;32mSpeedTest OK √ \033[0m"
echo ""
history -c
else
echo -e "\033[1;31mBaixando arquivos necessários...\033[0m"
wget -P /bin https://raw.githubusercontent.com/RDY8799/SSHNation/master/speedtest.py > /dev/null 2> /dev/null
echo ""
history -c
fi

echo -e "\033[42;1;37mSPEEDTEST\033[0m"
echo ""
echo -e "\033[1;31mIniciando...\033[0m"
ping=$(ping -c1 google.com |awk '{print $8 $9}' |grep -v loss |cut -d = -f2 |sed ':a;N;s/\n//g;ta')
echo ""
echo -e "\033[1;36mPing: \033[1;32m$ping\033[0m"
velo=$(speedtest.py |grep load:)
echo "$velo"

echo ""

}

rdyusermanager(){
menu
}

#####

rdyadvanced(){

clear
echo ""
echo -e "\033[4;36m$about\033[0m"

echo ""

echo -e "\033[1;32m[1] Atualizar pacotes\033[0m";
echo -e "\033[1;32m[2] Atualizar SO \033[0m";
echo -e "\033[1;36m[01-02]\033[0m"; read -p ": "  option

case $option in

1 | 01) 
echo ""
echo -e "\033[1;36mA atualização irá atualiza a lista de pacotes do seu sistema e atualizar todos os seus pacotes instalados para suas versões mais recentes.\033[0m"
  read -p "ENTER" enter
  sleep 3s
  apt-get update
  apt-get dist-upgrade
  apt-get update -y
  apt-get upgrade -y
  apt-get dist-upgrade -y
  echo -e "\033[1;36m
SISTEMA ESTA ATUALIZADO!
  \033[0m"
  exit ;;
2 | 02) 
echo ""
echo -e "\033[1;36m Isso irá atualizar seu SO para a versão mais recente, \033[1;31mse tiver nova versão. \033[1;36mNão prossiga se não souber o que está fazendo. A atualização pode demorar muito, seja paciente. Para continuar aperte\033[0m"; read -p " ENTER" enter
do-release-upgrade
  exit ;;
*) "Unknown option." ; echo ; sleep 2 ; RDY ;;
   esac

}
########

rdysysteminfo(){

clear
history -c
echo ""

echo -e "\033[4;36m$about\033[0m"

echo ""

if [ ! /proc/cpuinfo ]
then
echo -e "\033[1;31mError Getting System Information.\033[0m"
exit 0
fi
if [ ! /etc/issue.net ]
then
echo -e "\033[1;31mError Getting System Information.\033[0m"
exit 0
fi
if [ ! /proc/meminfo ]
then
echo -e "\033[1;31mError Getting System Information.\033[0m"
exit 0
fi

system=$(cat /etc/issue.net)
based=$(cat /etc/*release | grep ID_LIKE | awk -F "=" '{print $2}')
processor=$(cat /proc/cpuinfo | grep "model name" | uniq | awk -F ":" '{print $2}')
cpus=$(cat /proc/cpuinfo | grep processor | wc -l)

if [ "$system" ]
then
echo -e "\033[1;33mSystem:\033[1;30m $system \033[0m"
echo ""
else
echo -e "\033[1;31mSystem: Not Available\033[0m"
fi
if [ "$based" ]
then
echo -e "\033[1;33mIts a\033[1;30m $based-like\033[0m"
echo ""
else
echo -e "\033[1;31mBased system not Available\033[0m"
fi
if [ "$processor" ]
then
echo -e "\033[1;33mProcessor:\033[1;30m $processor x$cpus\033[0m"
echo ""
else
echo -e "\033[1;31mProcessor: Not Available\033[0m"
fi
clock=$(lscpu | grep "CPU MHz" | awk '{print $3}')
if [ "$clock" ]
then
echo -e "\033[1;33mClock\033[1;30m $clock MHz \033[0m"
echo ""
else
echo -e "\033[1;31mClock: Not Available\033[0m"
fi
echo -e "\033[1;33mCPU Usage:\033[1;30m$(ps aux  | awk 'BEGIN { sum = 0 }  { sum += sprintf("%f",$3) }; END { printf " " "%.2f" "%%", sum}')\033[0m"

totalram=$(free | grep Mem | awk '{print $2}')
usedram=$(free | grep Mem | awk '{print $3}')
freeram=$(free | grep Mem | awk '{print $4}')
swapram=$( cat /proc/meminfo | grep SwapTotal | awk '{print $2}')
echo -e "\033[1;33mRAM TOTAL: \033[1;30m$(($totalram / 1024))MB \033[1;33mUSED: \033[1;30m$(($usedram / 1024))MB \033[1;33mFREE: \033[1;30m$(($freeram / 1024))MB \033[1;33mSWAP: \033[1;30m$(($swapram / 1024))MB \033[0m"
echo ""
echo -e "\033[1;33mUptime:\033[1;30m$(uptime) \033[0m"
echo ""
echo -e "\033[1;33mHostname:\033[1;30m $(hostname) \033[0m"
echo ""
echo -e "\033[1;33mIP:\033[1;30m $(ip addr | grep inet | grep -v inet6 | grep -v "host lo" | awk '{print $2}' | awk -F "/" '{print $1}')\033[0m"
echo ""
echo -e "\033[1;33mKernel Version:\033[1;30m $(uname -r) \033[0m"
echo ""
echo -e "\033[1;33mArchitecture:\033[1;30m $(uname -m) \033[0m"
echo ""

}

rdyhelp(){

clear
echo -e "\033[1;32m$about\033[0m";
echo ""

echo -e "\033[1;32m Type to direct command: \n\n\033[1;36mRDY + option number\nEx: RDY 10\nTo Help.\033[0m"

echo ""

echo -e "\033[1;32mEscolha a opção e realize a operação desejada\n\nPara mais informações acesse:\n\033[1;36mwww.google.com\n\033[0m"

}

#ip=$(facter ipaddress_eth0)
#apt-get install facter

#################

testes(){
clear
echo ""
pt="$1"
echo -e "\033[1;33mVERIFICANDO PORTA \033[1;31m$pt\033[0m"
sleep 3s
if [[ -e /etc/ssh/sshd_config ]]; then
var1=$(cat /etc/ssh/sshd_config |egrep -o "Port $pt" |wc -l)
 if [ "$var1" = "0" ]; then
echo -e "\033[1;33mSSH OK!\033[0m"
sleep 3s
else
echo -e "\033[1;33mPORTA $pt USADA PELO SSH\033[0m"
sleep 6s
addportas
exit
 fi
fi
if [[ -e /etc/default/dropbear ]]; then
var2=$(cat /etc/default/dropbear |egrep -o "$pt " |wc -l)
 if [ "$var2" = "0" ]; then
echo -e "\033[1;33mDROPBEAR OK!\033[0m"
sleep 3s
else
echo -e "\033[1;33mPORTA $pt USADA PELO DROPBEAR\033[0m"
sleep 6s
addportas
exit
 fi
fi
if [[ -e /etc/squid/squid.conf ]]; then
var3=$(cat /etc/squid/squid.conf |egrep -o "http_port $pt" |wc -l)
 if [ "$var3" = "0" ]; then
echo -e "\033[1;33mSQUID OK!\033[0m"
sleep 3s
else
echo -e "\033[1;33mPORTA $pt USADA PELO SQUID\033[0m"
sleep 6s
addportas
exit
 fi
fi
if [[ -e /etc/squid3/squid.conf ]]; then
var4=$(cat /etc/squid3/squid.conf |egrep -o "http_port $pt" |wc -l)
 if [ "$var4" = "0" ]; then
echo -e "\033[1;33mSQUID OK!\033[0m"
sleep 3s
else
echo -e "\033[1;33mPORTA $pt USADA PELO SQUID\033[0m"
sleep 6s
addportas
exit
 fi
fi
}

newclient () {
	# Generates the custom client.ovpn
	cp /etc/openvpn/client-common.txt ~/$1.ovpn
	echo "<ca>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~/$1.ovpn
	echo "</ca>" >> ~/$1.ovpn
	echo "<cert>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >> ~/$1.ovpn
	echo "</cert>" >> ~/$1.ovpn
	echo "<key>" >> ~/$1.ovpn
	cat /etc/openvpn/easy-rsa/pki/private/$1.key >> ~/$1.ovpn
	echo "</key>" >> ~/$1.ovpn
	echo "<tls-auth>" >> ~/$1.ovpn
	cat /etc/openvpn/ta.key >> ~/$1.ovpn
	echo "</tls-auth>" >> ~/$1.ovpn
}

rdyopenvpn() {
# Detect Debian users running the script with "sh" instead of bash
if readlink /proc/$$/exe | grep -qs "dash"; then
	echo "This script needs to be run with bash, not sh"
	exit 1
fi

if [[ "$EUID" -ne 0 ]]; then
	echo "Sorry, you need to run this as root"
	exit 2
fi

if [[ ! -e /dev/net/tun ]]; then
	echo "TUN is not available"
	exit 3
fi

if grep -qs "CentOS release 5" "/etc/redhat-release"; then
	echo "CentOS 5 is too old and not supported"
	exit 4
fi
if [[ -e /etc/debian_version ]]; then
	OS=debian
	GROUPNAME=nogroup
	RCLOCAL='/etc/rc.local'
elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
	OS=centos
	GROUPNAME=nobody
	RCLOCAL='/etc/rc.d/rc.local'
else
	echo "Looks like you aren't running this installer on a Debian, Ubuntu or CentOS system"
	exit 5
fi


# Try to get our IP from the system and fallback to the Internet.
# I do this to make the script compatible with NATed servers (lowendspirit.com)
# and to avoid getting an IPv6.
IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
if [[ "$IP" = "" ]]; then
		IP=$(wget -4qO- "http://whatismyip.akamai.com/")
fi

if [[ -e /etc/openvpn/server.conf ]]; then
	clear
echo -e "\033[42;1;37m      OpenVPN     \033[0m"
echo ""
echo -e "\033[1;32mOpenVPN instalado! \033[0m"
echo ""
echo -e "\033[1;36mDigite \033[1;37mmenu\033[0m\033[1;36m e veja as opções disponíveis.\n\n\033[1;32mRDY SOFTWARE \033[0m"
echo ""
exit
else

clear
echo ""
	echo -e "\033[42;1;37m      OpenVPN     \033[0m"
echo ""
echo -e "\033[1;32mVamos instalar o OpenVPN em seu servidor \033[0m"
	echo ""
	# OpenVPN instalador e criação do primeiro usuario
echo ""
echo -e "\033[1;36mVerifique se seu IP está correto \033[0m"
	read -p "IP address: " -e -i $IP IP
echo ""
echo -e "\033[1;36mDigite o Host de conexão \033[0m";
read -p ": " meuhost
	echo ""
echo -e "\033[1;36mHeader: \033[0m"; read -p ": " -e -i X-Online-Host header
echo -e "\033[1;36mQual protocolo você deseja para as conexões OPENVPN? \033[0m"
	echo "   1) UDP"
	echo "   2) TCP (Recomendado)"
	read -p "Protocol [1-2]: " -e -i 2 PROTOCOL
	case $PROTOCOL in
		1) 
		PROTOCOL=udp
		;;
		2) 
		PROTOCOL=tcp
		;;
	esac
	echo ""
echo -e "\033[1;36mQual porta você deseja usar? \033[0m"
	read -p "Port: " -e -i 1194 PORT
	echo ""
echo -e "\033[1;36mQual DNS você deseja usar? \033[0m"
	echo "   1) Sistema(Recomendado)"
	echo "   2) Google"
	echo "   3) OpenDNS"
	echo "   4) NTT"
	echo "   5) Hurricane Electric"
	echo "   6) Verisign"
	read -p "DNS [1-6]: " -e -i 1 DNS
	echo ""
	echo "Agora,digite o nome de seu primeiro usuario"
	echo "Use somente o nome,sem caracteres especiais"
	read -p "Client name: " -e -i client CLIENT
	echo ""
echo -e "\033[1;32mTudo pronto! Vamos prosseguir?! \033[0m"
	read -n1 -r -p "Pressione uma tecla para continuar..."
	if [[ "$OS" = 'debian' ]]; then
		apt-get upgrade
		apt-get install openvpn iptables openssl ca-certificates -y
	else
		# Else, the distro is CentOS
		yum install epel-release -y
		yum install openvpn iptables openssl wget ca-certificates -y
	fi
	# An old version of easy-rsa was available by default in some openvpn packages
	if [[ -d /etc/openvpn/easy-rsa/ ]]; then
		rm -rf /etc/openvpn/easy-rsa/
	fi
	# Adquirindo easy-rsa
	wget -O ~/EasyRSA-3.0.1.tgz "https://github.com/OpenVPN/easy-rsa/releases/download/3.0.1/EasyRSA-3.0.1.tgz"
	tar xzf ~/EasyRSA-3.0.1.tgz -C ~/
	mv ~/EasyRSA-3.0.1/ /etc/openvpn/
	mv /etc/openvpn/EasyRSA-3.0.1/ /etc/openvpn/easy-rsa/
	chown -R root:root /etc/openvpn/easy-rsa/
	rm -rf ~/EasyRSA-3.0.1.tgz
	cd /etc/openvpn/easy-rsa/
	# Create the PKI, set up the CA, the DH params and the server + client certificates
	./easyrsa init-pki
	./easyrsa --batch build-ca nopass
	./easyrsa gen-dh
	./easyrsa build-server-full server nopass
	./easyrsa build-client-full $CLIENT nopass
	./easyrsa gen-crl
	# Move the stuff we need
	cp pki/ca.crt pki/private/ca.key pki/dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn
	# CRL is read with each client connection, when OpenVPN is dropped to nobody
	chown nobody:$GROUPNAME /etc/openvpn/crl.pem
	# Generando key for tls-auth
	openvpn --genkey --secret /etc/openvpn/ta.key
	# Generando server.conf
	echo "port $PORT
proto $PROTOCOL
dev tun
sndbuf 0
rcvbuf 0
ca ca.crt
cert server.crt
key server.key
dh dh.pem
tls-auth ta.key 0
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt" > /etc/openvpn/server.conf
	echo 'push "redirect-gateway def1 bypass-dhcp"' >> /etc/openvpn/server.conf
	# DNS
	case $DNS in
		1) 
		# Obtain the resolvers from resolv.conf and use them for OpenVPN
		grep -v '#' /etc/resolv.conf | grep 'nameserver' | grep -E -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | while read line; do
			echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server.conf
		done
		;;
		2) 
		echo 'push "dhcp-option DNS 8.8.8.8"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 8.8.4.4"' >> /etc/openvpn/server.conf
		;;
		3)
		echo 'push "dhcp-option DNS 208.67.222.222"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 208.67.220.220"' >> /etc/openvpn/server.conf
		;;
		4) 
		echo 'push "dhcp-option DNS 129.250.35.250"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 129.250.35.251"' >> /etc/openvpn/server.conf
		;;
		5) 
		echo 'push "dhcp-option DNS 74.82.42.42"' >> /etc/openvpn/server.conf
		;;
		6) 
		echo 'push "dhcp-option DNS 64.6.64.6"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 64.6.65.6"' >> /etc/openvpn/server.conf
		;;
	esac
	echo "keepalive 10 20
float
cipher AES-256-CBC
comp-lzo
user nobody
group $GROUPNAME
persist-key
persist-tun
status openvpn-status.log
verb 3
crl-verify crl.pem
client-to-client
client-cert-not-required
username-as-common-name
plugin /usr/lib/openvpn/openvpn-plugin-auth-pam.so login" >> /etc/openvpn/server.conf
	# Enable net.ipv4.ip_forward for the system
	sed -i '/\<net.ipv4.ip_forward\>/c\net.ipv4.ip_forward=1' /etc/sysctl.conf
	if ! grep -q "\<net.ipv4.ip_forward\>" /etc/sysctl.conf; then
		echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
	fi
	# Avoid an unneeded reboot
	echo 1 > /proc/sys/net/ipv4/ip_forward
	# Needed to use rc.local with some systemd distros
	if [[ "$OS" = 'debian' && ! -e $RCLOCAL ]]; then
		echo '#!/bin/sh -e
exit 0' > $RCLOCAL
	fi
	chmod +x $RCLOCAL
	# Set NAT for the VPN subnet
	iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP
	sed -i "1 a\iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP" $RCLOCAL
	if pgrep firewalld; then
		# We don't use --add-service=openvpn because that would only work with
		# the default port and protocol. Using both permanent and not permanent
		# rules to avoid a firewalld reload.
		firewall-cmd --zone=public --add-port=$PORT/$PROTOCOL
		firewall-cmd --zone=trusted --add-source=10.8.0.0/24
		firewall-cmd --permanent --zone=public --add-port=$PORT/$PROTOCOL
		firewall-cmd --permanent --zone=trusted --add-source=10.8.0.0/24
	fi
	if iptables -L -n | grep -qE 'REJECT|DROP'; then
		# If iptables has at least one REJECT rule, we asume this is needed.
		# Not the best approach but I can't think of other and this shouldn't
		# cause problems.
		iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
		iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT
          iptables -F
		iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
		sed -i "1 a\iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT" $RCLOCAL
		sed -i "1 a\iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT" $RCLOCAL
		sed -i "1 a\iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" $RCLOCAL
	fi
	# If SELinux is enabled and a custom port or TCP was selected, we need this
	if hash sestatus 2>/dev/null; then
		if sestatus | grep "Current mode" | grep -qs "enforcing"; then
			if [[ "$PORT" != '1194' || "$PROTOCOL" = 'tcp' ]]; then
				# semanage isn't available in CentOS 6 by default
				if ! hash semanage 2>/dev/null; then
					yum install policycoreutils-python -y
				fi
				semanage port -a -t openvpn_port_t -p $PROTOCOL $PORT
			fi
		fi
	fi
	# And finally, restart OpenVPN
	if [[ "$OS" = 'debian' ]]; then
		# Little hack to check for systemd
		if pgrep systemd-journal; then
			systemctl restart openvpn@server.service
		else
			/etc/init.d/openvpn restart
		fi
	else
		if pgrep systemd-journal; then
			systemctl restart openvpn@server.service
			systemctl enable openvpn@server.service
		else
			service openvpn restart
			chkconfig openvpn on
		fi
	fi
	# Try to detect a NATed connection and ask about it to potential LowEndSpirit users
	EXTERNALIP=$(wget -4qO- "http://whatismyip.akamai.com/")
	if [[ "$IP" != "$EXTERNALIP" ]]; then
		echo ""
		echo "Looks like your server is behind a NAT!"
		echo ""
		echo "If your server is NATed (e.g. LowEndSpirit), I need to know the external IP"
		echo "If that's not the case, just ignore this and leave the next field blank"
		read -p "External IP: " -e USEREXTERNALIP
		if [[ "$USEREXTERNALIP" != "" ]]; then
			IP=$USEREXTERNALIP
		fi
	fi
	# client-common.txt is created so we have a template to add further users later
	echo "client
dev tun
proto $PROTOCOL
sndbuf 0
rcvbuf 0
remote $IP $PORT
http-proxy-option CUSTOM-HEADER $header $meuhost
http-proxy $IP 80
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
comp-lzo
setenv opt block-outside-dns
key-direction 1
verb 3
auth-user-pass
keepalive 10 20
float" > /etc/openvpn/client-common.txt
	# Generates the custom client.ovpn
	newclient "$CLIENT"
clear
echo ""
echo -e "\033[1;32m√ CONCLUÍDO √ \033[0m"
	echo ""
echo -e "\033[1;32mSeu arquivo está disponivel em" ~/"$CLIENT.ovpn \033[0m"
echo ""
echo -e "\033[1;36m$about \033[0m"
fi
sed -i '$ i\echo 1 > /proc/sys/net/ipv4/ip_forward' /etc/rc.local
sed -i '$ i\echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6' /etc/rc.local
sed -i '$ i\iptables -A INPUT -p tcp --dport 25 -j DROP' /etc/rc.local
sed -i '$ i\iptables -A INPUT -p tcp --dport 110 -j DROP' /etc/rc.local
sed -i '$ i\iptables -A OUTPUT -p tcp --dport 25 -j DROP' /etc/rc.local
sed -i '$ i\iptables -A OUTPUT -p tcp --dport 110 -j DROP' /etc/rc.local
sed -i '$ i\iptables -A FORWARD -p tcp --dport 25 -j DROP' /etc/rc.local
sed -i '$ i\iptables -A FORWARD -p tcp --dport 110 -j DROP' /etc/rc.local
echo ""

}
###################################

#################


if [[ $1 == "" ]]

then

if [ ! -f "/etc/default/dropbear" ]; then
rdydrop="X"
else
rdydrop="OK"
fi

if [ ! -f "/etc/squid3/squid.conf" ]; then
rdysquid="X"
else
rdysquid="OK"
fi

if [ ! -f "/root/proxy.py" ]; then
rdysocks="X"
else
rdysocks="OK"
fi

if [ ! -f "/root/server.py" ]; then
rdyget="X"
else
rdyget="OK"
fi

if [ ! -f "/bin/speedtest.py" ]; then
rdyspeed="X"
else
rdyspeed="OK"
fi

if [ ! -f "/bin/menu" ]; then
rdymanager="X"
else
rdymanager="OK"
fi

udpvar=$(netstat -nlpt | egrep -o udpgw)
if [ "$udpvar" = "" ]; then
rdybad="X"
else
rdybad="OK"
fi

if [[ -e /etc/openvpn/server.conf ]]; then
rdyopen="OK"
else
rdyopen="X"
fi

clear

echo -e "\033[1;32m$about\033[0m";
echo "";
echo "----------------------------------------------------";
echo -e "\033[1;32m -> \033[01;37mIP:\033[1;31m $ip\033[0m";
echo "";
echo -e "\033[1;32m -> \033[01;37mOPERATIONAL SYSTEM:\033[1;31m $(cat /etc/so)\033[0m";
echo "----------------------------------------------------";
echo -e "\033[1;36m[ # CTRL + C to exit # ]\033[0m";
echo "";
echo -e "\033[1;33m[01] OpenSSH   \033[1;36m$rdysquid \033[0m";
echo -e "\033[1;33m[02] DropBear   \033[1;36m$rdydrop\033[0m";
echo -e "\033[1;33m[03] SOCKS5   \033[1;36m$rdysocks \033[0m";
echo -e "\033[1;33m[04] GetTunnel   \033[1;36m$rdyget \033[0m";
echo -e "\033[1;33m[05] BadVPN   \033[1;36m$rdybad\033[0m";
echo -e "\033[1;33m[06] OpenVPN   \033[1;36m$rdyopen\033[0m";
echo -e "\033[1;33m[07] SpeedTest   \033[1;36m$rdyspeed\033[0m";
echo "";
echo -e "\033[1;32m[08] User manager (menu)  \033[1;36m$rdymanager\033[0m";
echo -e "\033[1;32m[09] System info \033[0m"
echo -e "\033[1;32m[10] Reboot \033[0m"
echo -e "\033[1;32m[11] Advanced \033[0m"
echo -e "\033[1;32m[12] Help \033[0m";
echo "";
echo -e "\033[1;32m[13] Web - configuration LAMP \033[0m";
echo " ";
echo "";
echo -e "\033[1;32m[404] Uninstall Script\033[0m";
echo -e "\033[1;36m[01-13]\033[0m"; read -p ": "  option

else
option=$1
fi

case $option in

1 | 01) rdyopenssh ;;
2 | 02) rdydropbear ;;
3 | 03) rdysocks ;;
4 | 04) rdygettunnel ;;
5 | 05) rdybadvpn ;;
6 | 06) rdyopenvpn ;;
7 | 07) rdyspeedtest ;;
8 | 08) rdyusermanager ;;
9 | 09) rdysysteminfo ;;
10 | 10) reboot ;;
11) rdyadvanced ;;
12) rdyhelp ;;
13) rdylampsettings ;;
404) rm -rf /bin/RDY* /dev/null 2> /dev/null
    rm -rf /bin/speedtest.py /dev/null 2> /dev/null
    rm -rf /bin/rdy* /dev/null 2> /dev/null
    rm -rf /bin/proxy* /dev/null 2> /dev/null
    rm -rf /bin/rdymenu /dev/null 2> /dev/null
    rm -rf /bin/server* /dev/null 2> /dev/null
    rm -rf /bin/*.rdy /dev/null 2> /dev/null
    rm -rf /bin/menu > /dev/null 2> /dev/null
    find / -name 'rdy*' -exec rm {} \; > /dev/null 2> /dev/null

echo ""

echo -e "\033[1;32m © RDY SOFTWARE | 2016 - 2017 All rights reserved \033[0m"

echo ""

echo -e "\033[1;32m Uninstalled! \033[0m" ;;
 *) "Unknown option." ; echo "" ; sleep 2 ; bash RDY ;;
   esac
