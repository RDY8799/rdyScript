#!/bin/bash

clear

if [ $(id -u) -eq 0 ]
then
clear
else
	if echo $(id) |grep sudo > /dev/null
	then
	clear
	echo "Você não é root"
	echo "Seu usuário esta no grupo sudo"
	echo -e "Para tornar-se root execute \033[1;31msudo su\033[0m"
	exit
	else
	clear
	echo -e "Você não está como usuário root, nem com seus direitos (sudo)\nPara tornar-se root execute \033[1;31msu\033[0m e digite sua senha root"
	exit
	fi
fi

ip=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
if [[ "$ip" = "" ]]; then
ip=$(wget -qO- ipv4.icanhazip.com)
fi

#####-------######------#####-----####

password(){
error="Invalid password!\nPlease try again.\n\n\033[1;36mPossible causes for this error:\033[1;37m\nYou have entered the wrong password.\nYour password has expired.\nYou are not registered.\033[1;32m\nIf you do not have a password, send an email to \033[1;37m$email\033[0m\033[1;32m and request a password."

caracteres="No special characters like *, #, & etc. are allowed."

about="© RDY SOFTWARE | 2016 - 2018 All rights reserved "
email="rdysoftware@gmail.com"
rdy="/etc/a/b/c/d/e/f/g/h/i/j/k/0/1/2/3/4/5/6/7/8/9/m/n/o/p/q/r/s/t/u/v/w/x/y/z/rdy/$ip"

echo ""
echo -e "\033[46;1;37m$about\033[0m"
echo ""
echo -e "\033[42;1;37mACESS PASSWORD\033[0m"
echo ""
echo -e "\033[1;36m[1/3] Type your password: \033[0m"; read -p "" senha

if [[ -z $senha ]]
then
echo ""
echo -e "\033[1;31mYou left the empty space one entered a nonexistent password.\033[0m"
exit
else
if (echo $senha | egrep [^a-zA-Z0-9] &> /dev/null)
then

echo -e "\033[1;31m\n(ERROR 01) $error\033[0m"
#rm $rdy > /dev/null 2> /dev/null
else

echo " ";

fi
if [[ `grep -c "^$senha" $rdy` -ne 1 ]]
then
echo ""
echo -e "\033[1;31m\n(ERROR 02) $error \nfiaracteres\033[0m"
rm $rdy > /dev/null 2> /dev/null
echo ""
exit
else
echo ""
echo -e "\033[1;36m\033[1;32m√ \033[0mValid password!\033[0m"

okfile="/etc/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/"
if [  -d $okfile  ]; then
echo " ";
else
mkdir -P $okfile
fi

echo "$senha  #     $ip   ---   Louvado Seja Deus O Senhor!" > /etc/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/rdyOOOok
fi
fi
#####-------######------#####-----####

}


file="/etc/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/rdyOOOok"

if [ -f "$file" ]
then
echo "ok"
else
password
fi


if [ -d /etc/tomada ]
then
echo ""
else
mkdir /etc/tomada
fi

if [ -d /etc/tomada/senha ]
then
echo ""
else
mkdir /etc/tomada/senha
fi

if [ -d /etc/tomada/limite ]
then
echo ""
else
mkdir /etc/tomada/limite
fi

if [ -d /etc/tomada/rdy_date ]
then
echo ""
else
mkdir /etc/tomada/rdy_date
fi


if [ -d /etc/rdy ]
then
echo ""
else
mkdir /etc/rdy
fi

rdychangelimit(){
# RDY SOFTWARE
clear
echo -e "\033[42;1;37mAlterar limite de logins para um usuário \033[0m"
echo ""
echo -e "\033[1;33mNome do usuário: \033[0m"; read -p "" user
 if cat /etc/passwd |grep $user: > /dev/null
then
echo ""
 else
 clear
echo -e "\033[1;31mO usuário \033[4;32m$user\033[0m não existe, tente novamente.\033[0m"
Limite
 fi
	echo -e "\033[1;33mQuantidade de logins para \033[4;36m$user:\033[0m"; read -p ": " logins
  limit $user $logins
echo ""
echo -e "\033[1;36mUsuário:\033[0m $user"
echo -e "\033[1;36mN° de logins atualmente:\033[0m $logins logins"
exit 0
}

rdyadduser(){
if [ $(id -u) -eq 0 ]
then
echo -e "\033[42;1;37mCRIAR NOVOS USUÁRIOS\033[0m"
echo ""
echo -e "\033[1;36m[1/4]Nome do novo usuário:\033[0m"; read -p "" user
echo ""
if cat /etc/passwd |grep $user: |grep -vi [a-z]$user |grep -v [0-9]$user > /dev/null
	then
clear
echo -e "\033[4;31mUsuário \033[5;31m$user\033[0m já existe, crie outro usúario.\033[0m"
CriarUsuario
else
echo -e "\033[1;36m[2/4]Senha para \033[4;32m$user:\033[0m"; read -p "" password
echo ""
echo -e "\033[1;36m[3/4]Dias para expirar:\033[0m"; read -p "" days
echo ""
echo -e "\033[1;36m[4/4]Quantidade de logins permitido:\033[0m"; read -p "" logins
echo ""
echo -e "\033[1;32mUm momento...\033[0m"
echo ""


rdyw=$(date '+%C%y-%m-%d' -d " +$days days")
rdyx=$(date "+%d/%m/%Y" -d "+ $days days")
useradd -M -s /bin/false $user -e $rdyw
		(echo $password; echo $password)|passwd $user 2>/dev/null
limit $user $logins
echo -e "\033[1;32m√ Sucesso! √\033[0m"
echo ""
echo -e "\033[1;36mUsuário: \033[0m$user"
echo -e "\033[1;36mSenha: \033[0m$password"
echo -e "\033[1;36mExpira em:\033[0m$rdyx"
echo -e "\033[1;36mLimite:\033[0m$logins login(s)"
echo "$password" > /etc/tomada/senha/$user
echo "$rdyw" > /etc/tomada/rdy_date/$user
fi
else
if echo $(id) |grep sudo > /dev/null
then
echo -e "\033[1;37mSeu usuário está no grupo sudo\033[0m"
echo -e "\033[1;37mPara tornar-se root execute \033[1;31msudo su\033[0m"
echo -e "\033[1;37mOu execute o \033[4;31mUc\033[0m como sudo.\n\033[1;31msudo Uc\033[0m"
else
echo -e "\033[1;37mVocê não está como usuário root, nem com seus direitos (sudo)\nPara tornar-se root execute \033[4;31msu\033[0m e digite sua senha root\033[0m"
	fi
fi
}

rdychangepass(){
clear
echo -e "\033[42;1;37mMUDAR SENHA\033[0m"
echo ""
echo -e "\033[1;36mNome do usuário\033[0m"; 
read -p ": " user
if cat /etc/passwd |grep $user: > /dev/null
then
echo ""
else
clear
echo -e "\033[1;36mUsuário \033[4;31m$user\033[0m não existe!\033[0m"
exit
fi
echo -e "\033[1;36mNova senha para \033[4;32m$user\033[0m"; 
read -p ": " password
(echo $password; echo $password)|passwd $user 2>/dev/null
echo -e "\033[1;36m\033[1;32m√\033[0m A nova senha do usuário \033[4;32m$user\033[0m é: \033[1;32m$password\033[0m"
echo "$password" > /etc/tomada/senha/$user
exit

}

rdychangedate(){
clear
echo -e "\033[42;1;37mMUDAR DATA\033[0m"
echo ""
echo -e "\033[1;36mNome do usuário\033[0m"; 
read -p ": " user
if cat /etc/passwd |grep $user: > /dev/null
then
echo ""
else
clear
echo -e "\033[1;36mUsuário \033[4;31m$user\033[0m não existe!\033[0m"
exit
fi
echo -e "\033[1;36mDigite os dados para a nova data de expiração\033[0m"
echo ""
echo -e "\033[1;36mDia(1-30): \033[0m"; read -p "" dia
echo -e "\033[1;36mMês(1-12): \033[0m"; read -p "" mes
echo -e "\033[1;36mAno(2017-3000): \033[0m"; read -p "" ano

chage -E $ano/$mes/$dia $user 2> /dev/null
echo -e "\033[1;36m\033[1;32m√\033[0m Nova data do usuário \033[4;32m$user\033[0m: \033[1;32m$dia/$mes/$ano\033[0m"
exit

}

rdydeleteuser(){
clear
echo -e "\033[42;1;37mDELETAR USUÁRIO\033[0m"
echo ""
echo -e "\033[1;36mNome do usuário\033[0m"; 
read -p ": " user
if cat /etc/passwd |grep $user: > /dev/null
then
echo ""
else
clear
echo -e "\033[1;36mUsuário \033[4;31m$user\033[0m não existe!\033[0m"
exit
Ub
fi
userdel --force $user > /dev/null 2>/dev/null
echo -e "\033[1;36m\033[1;32m√\033[0m Usuário \033[4;31m$user\033[0m foi deletado!\033[0m"
exit
}

rdycreateusertest(){
clear
echo -e "\033[42;1;37m Criar Usuário Temporário \033[0m"

mkdir /etc/usuariosteste 1>/dev/null 2>/dev/null
echo -e "\033[1;37mUsuarios teste \033[0m"
for testus in $(ls /etc/usuariosteste |sort |sed 's/.sh//g')
do
echo "$testus"
done
printf "\n"
echo -e "\033[1;36mNome do novo usuario: \033[0m"; read nome
echo -e "\033[1;36mSenha para o usuário: \033[0m"; read pass
echo -e "\n\033[1;36mUse s = segundos, m = minutos, h = horas e d = dias \033[1;37mEX: 14s .\033[0m"
echo -e "\033[1;36mQuanto tempo o usuário \033[1;32m$nome\033[0m deve durar? \033[0m"; read tempoin
tempo=$(echo "$tempoin" |sed 's/ //g')
useradd -M -s /bin/false $nome
(echo $pass;echo $pass) |passwd $nome 1>/dev/null 2>/dev/null
echo "#!/bin/bash
sleep $tempo
kill"' $(ps -u '"$nome |awk '{print"' $1'"}') 1>/dev/null 2>/dev/null
userdel --force $nome
rm -rf /etc/usuariosteste/$nome.sh
exit" > /etc/usuariosteste/$nome.sh
echo -e "Usuario: $nome
Senha: $pass
Validade: $tempo\n
Apos o tempo expirar o usuario sera deletado e todos serão desconectados."
bash /etc/usuariosteste/$nome.sh &
exit
}

rdydeleteexpiredusers(){
clear
echo -e "         \033[1;33mRemover Usuarios Expirados\033[0m"
datahoje=$(date +%s)
for user in $(cat /etc/passwd |grep -v "nobody" |awk -F : '$3 > 900 {print $1}')
do
dataexp=$(chage -l $user |grep "Account expires" |awk -F : '{print $2}')
if [[ $dataexp == ' never' ]]; then
id > /dev/null 2>/dev/null
else
dataexpn=$(date -d"$dataexp" '+%d/%m/%Y')
dataexpnum=$(date '+%s' -d"$dataexp")
fi
if [[ $dataexpnum < $datahoje ]]; then
printf "\033[1;31m"
printf '%-41s' $user
printf "\033[0m"
echo "Expired Deleted"
kill $(ps -u $user |awk '{print $1}') >/dev/null 2>/dev/null ; userdel $user
else
printf "\033[1;32m"
printf '%-41s' $user
printf "\033[0m"
echo $dataexpn
fi
done
}

rdynolimit(){
clear
echo -e "\033[42;1;37mRemover limite de conexões \033[0m"
echo "" 
echo -e "\033[1;32mQual usuario a retirar o limite: \033[0m"
read user
cronsemuser=$(cat /etc/crontab |grep -v "#$user#")
echo "$cronsemuser" > /etc/crontab
rm -rf /etc/tomada/limite/$user 2>/dev/null
rm -rf /etc/tomada/limite/$user.sh 2>/dev/null
pids=$(ps x |grep "#$user#" |awk {'print $1'})
kill $pids 2>/dev/null
kill "$pids" 2>/dev/null
kill -9 `ps x |grep "#$user#" |awk {'print $1'}` 2>/dev/null
kill `ps x |grep "#$user#" |awk {'print $1'}` 2>/dev/null
echo -e "\033[1;32m√ Usuario: $user, Limite removido\033[0m"
}

rdyusersdetails(){
clear

echo -e "\033[1;36m----------------------------------------------------------------------\033[0m"
echo -e "\033[1;37m Usuário               Senha               Data E.          Logins S. \033[0m"
echo -e "\033[1;36m----------------------------------------------------------------------\033[0m"
for users in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi system-`
do

if cat /etc/tomada/limite/$users > /dev/null 2> /dev/null
then
limitecs=$(cat /etc/tomada/limite/$users)
else
limitecs=":-/"
fi

if  senha=$(cat /etc/tomada/senha/$users > /dev/null 2> /dev/null)
then
senha=$(cat /etc/tomada/senha/$users)
else
senha=":-/"
fi

data=$(chage -l $users |grep -i co |awk -F : '{print $2}')
if [ $data = never ] 2> /dev/null
then
date=":-/"
fi
detalhesdata=$(printf '%-18s' "$data")
detalheslimit=$(printf '%-10s' "$limitecs")
detalhes=$(printf ' %-21s' "$users")
detalhespass=$(printf '%-18s' "$senha")
echo -e "\033[1;32m$detalhes $detalhespass $detalhesdata $detalheslimit\033[0m"
echo -e "\033[1;36m----------------------------------------------------------------------\033[0m"
done
}

rdymonitor(){
clear
while true; do
echo ""
echo -e "\033[1;37m               Para sair, tecle Ctrl + c                    \033[0m"
echo -e "\033[1;37m -----------------------------------------------------------\033[0m"
echo -e "\033[42;1;37m   Usuário                :               Conexão/Limite   \033[0m"
echo -e "\033[1;37m -----------------------------------------------------------\033[0m"
        for usur in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9]`; do
	usurnum=$(ps -u $usur |grep sshd |wc -l)
  rdy=$(cat /etc/tomada/limite/$usur)
echo -e "\033[1;33m    $(printf '%-42s%s' $usur $usurnum/$rdy) \033[0m"
echo -e "\033[1;37m -----------------------------------------------------------\033[0m"
        done
sleep 5s
clear
done

}

rdybanner(){
clear
echo -e "\033[42;1;37mCriar Banner \033[0m"
echo ""
ssg=$(cat /etc/ssh/sshd_config |grep -v "Banner")
echo "$ssg" > /etc/ssh/sshd_config
echo "Banner /etc/bannerssh" >> /etc/ssh/sshd_config
service ssh restart 1>/dev/null 2>/dev/null
service sshd restart 1>/dev/null 2>/dev/null
if [ -f /etc/bannerssh ]
then
banner=$(cat /etc/bannerssh)
else
banner="Sem Banner!"
fi
echo -e "\033[1;32mSeu Banner:\n\n\033[1;37m$banner\n\033[0m"
echo "\033[1;36mQual banner deseja adicionar (ctrl + c para sair )"
read -p ": " bannerssh
echo "$bannerssh" > /etc/bannerssh
service ssh restart 1> /dev/null 2>/dev/null
service sshd restart 1>/dev/null 2>/dev/null

}

rdybadvpn(){
clear
echo -e "\033[42;1;37mFERRAMENTAS BADVPN\033[0m"
echo ""
echo -e "\033[1;36m1) Iniciar BadVPN
2) Parar BadVPN
3) Sair\033[0m"
read -p "Opção: " option

echo ""
if [ $option -eq 1 ]; then

badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 1000 --max-connections-for-client 10 > /dev/null &

echo -e "\033[1;32m√ BadVPN iniciado e rodando em sessão screen √ \033[0m"
fi

if [ $option -eq 2 ]; then
echo -e "\033[1;36mParando BadVPN... \033[0m"
echo ""

kill -9 $(ps -ef | grep badvpn | awk '{print $2}') > /dev/null 2> /dev/null

sleep 2
echo -e "\033[1;32m√ BadVPN parado!\033[0m"

fi

if [ $option -eq 3 ]; then
exit
fi

}

rdyblockfirewall(){
clear
echo -e "\033[42;1;37mBloquear Torrente \033[0m"
echo ""
echo -e "\033[1;36mBloquear firewall? \033[0m"
read -p "[s/n]: " -e -i n fw

echo ""
if [[ "$fw" = 's' ]]; then
ip=$(wget -qO- ipv4.icanhazip.com)
echo -e "\033[1;36mIP: \033[4;31m$ip\033[0m"
echo ""
echo -e "\033[5;32mConfigurando...\033[0m"
iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -t filter -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -p tcp -d $ip --dport 443 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p tcp -d $ip --dport 80 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p tcp --dport 53 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p udp --dport 53 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p tcp --dport 67 -m state --state NEW -j ACCEPT
iptables -A OUTPUT -p udp --dport 67 -m state --state NEW -j ACCEPT
iptables -A INPUT -p TCP --dport 1194 -j ACCEPT
iptables -A OUTPUT -p TCP --dport 1194 -j ACCEPT
iptables -A FORWARD -p TCP --dport 1194 -j ACCEPT
iptables -A INPUT -p UDP --dport 1194 -j ACCEPT
iptables -A OUTPUT -p UDP --dport 1194 -j ACCEPT
iptables -A FORWARD -p UDP --dport 1194 -j ACCEPT
iptables -A INPUT -p UDP --dport 7300 -j ACCEPT
iptables -A OUTPUT -p UDP --dport 7300 -j ACCEPT
iptables -A FORWARD -p UDP --dport 7300 -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
iptables -A INPUT -p tcp --dport 8080 -j ACCEPT
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 3128 -j ACCEPT
iptables -A INPUT -p tcp --dport 8799 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 8080 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 3128 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 8799 -j ACCEPT
iptables -A FORWARD -p tcp --dport 8080 -j ACCEPT
iptables -A FORWARD -p tcp --dport 80 -j ACCEPT
iptables -A FORWARD -p tcp --dport 3128 -j ACCEPT
iptables -A FORWARD -p tcp --dport 8799 -j ACCEPT
iptables -A INPUT -p icmp --icmp-type echo-request -j DROP
iptables -A INPUT -p tcp --dport 10000 -j ACCEPT
iptables -A OUTPUT -p tcp --dport 10000 -j ACCEPT
echo -e "\033[1;37mFirewall modificado
Portas 443 22 8799 8080 1194 7300 80 3128
Bloqueio ICMP
Bloqueio Torrent\033[0m"
fi

if [[ "$fw" = 'n' ]]; then
echo -e "\033[1;31mOperação abortada! \033[0m"
exit
fi
}

rdyresetfirewall(){
clear
echo -e "\033[42;1;37mResetar regras iptables \033[0m"
echo ""

echo -e "\033[1;36mContinuar? \033[0m"
read -p "[s/n]: " -e -i n rf

if [[ "$rf" = 's' ]]; then
iptables -F
iptables -X
iptables -t mangle -F
iptables -t mangle -X
iptables -t nat -F
iptables -t nat -X
iptables -t filter -F
iptables -t filter -X
echo -e "\033[4;31mRegras resetadas!\033[0m"
fi

if [[ "$rf" = 'n' ]]; then
echo -e "\033[1;31mOperação abordada! \033[0m"
fi
}

rdybackup(){
clear
#RDY SOFTWARE
# © RDY SOFTWARE | 2016 - 2018 All rights reserved

read -p "Nome para o arquivo de backup: " file
clear

for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9]`

do

if [ -e /etc/tomada/senha/$user ]
then
pass=$(cat /etc/tomada/senha/$user)
else
pass = "rdy1234";
fi

if [ -e /etc/tomada/limite/$user ]
then
limite=$(cat /etc/tomada/limite/$user)
date=$(cat /etc/tomada/rdy_date/$user)
echo '"00","$ip","$user","$pass","$limite","$date","@rdysoftware"' >> /etc/rdy/$file
else

echo "$user:$pass" >> /etc/rdy/$file
fi
done
echo -e "\033[1;32m Arquivo salvo em /etc/rdy/$file \033[0m";
echo "√ Backup finished! OK √";
}

rdyrestorebackup(){
#RDY SOFTWARE

clear
echo -e "\033[1;32m Diretório e nome do arquivo de backup \033[0m" read -p ": " arq
clear

for user in `cat $arq`
do
usuario=$(echo "$user" |awk -F '","' '{print $3}')
senha=$(echo "$user" |awk -F '","' '{print $4}')

if cat /etc/passwd |grep $usuario: 1> /dev/null 2>/dev/null
then
echo " " > /dev/null
else
echo "$user" |cut -d: -f3 1> /dev/null 2>/dev/null
  if [ $? = 0 ]
  then
  limite=$(echo "$user" |awk -F '","' '{print $5}')
   data=$(echo "$user" |awk -F '","' '{print $6}')
  useradd -M -s /bin/false $usuario
  (echo $senha ; echo $senha) | passwd $usuario > /dev/null 2> /dev/null
  limit $usuario $limite 1> /dev/null 2> /dev/null
  echo "$senha" > /etc/tomada/senha/$usuario
  chage -E $data $usuario 2> /dev/null
  chage -W 3 $usuario 2> /dev/null
echo "$usuario" > /etc/tomada/rdy_date/$usuario
  else
  useradd -M -s /bin/false $usuario
  (echo $senha ; echo $senha) | passwd $usuario > /dev/null 2> /dev/null
  echo "$senha" > /etc/tomada/senha/$usuario
  fi
echo "√ Finished! OK √";
fi
done
}

rdyaddhost(){
clear
rdy="/etc/payloads"
clear
echo -e "\033[42;1;37mFERRAMENTA PARA ADICIONAR NOVOS HOSTS\033[0m"
echo ""
if [ ! -f "$rdy" ]
then
echo ""
echo -e "\033[1;36mArquivo \033[4;31m$rdy\033[0m não encontrado!\033[0m"
exit 1
else
echo -e "\033[1;36mDomínios atuais no arquivo \033[4;31m$rdy\033[0m:\033[0m"
cat $rdy ; 
echo ""
echo -e "\033[1;36mDigite o novo Host\033[0m"
read -p ": " host
echo "$host" >> /etc/payload
squid3 -k reconfigure 2> /dev/null
squid -k reconfigure 2> /dev/null
echo -e "\033[1;32m√ \033[4;31m$host\033[0m foi adicionado com sucesso! √\033[0m"
fi
}

rdydeletehost(){
clear
rdy="/etc/payloads"
echo ""
echo -e "\033[42;1;37mREMOVER HOSTS\033[0m"
echo ""
if [ ! -f "$rdy" ]
then
echo ""
echo -e "\033[1;36mArquivo \033[4;31m$rdy\033[0m não encontrado!\033[0m"
exit 1
else
echo -e "\033[1;36mDomínios atuais no arquivo \033[4;31m$rdy\033[0m:\033[0m"
echo ""
cat $rdy ; 
echo ""
echo -e "\033[1;36mDigite o domínio que deseja remover da lista:\033[0m"; read -p "" host
if [[ -z $host ]]
then
echo ""
echo -e "\033[1;36mVocê digitou um domínio vazio ou não existente! \033[0m"
exit 1
else
if [[ `grep -c "^$host" $rdy` -ne 1 ]]
then
echo ""
echo -e "\033[1;36mO domínio \033[4;31m$host\033[0m não foi encontrado no arquivo \033[4;31m$rdy\033[0m\033[0m"
exit 1
else
grep -v "^$host" $rdy > /tmp/a && mv /tmp/a $rdy
echo ""
echo -e "\033[1;36m\033[1;32m√ \033[0mArquivo \033[4;31m$rdy\033[0m atualizado, o domínio foi removido com sucesso!\033[0m"
echo ""
cat $rdy ; 
echo ""

squid3 -k reconfigure 2> /dev/null
squid -k reconfigure 2> /dev/null

#if [ ! -f "/etc/init.d/squid" ]
#then
#service squid reload
#else
#/etc/init.d/squid reload
#fi	

echo -e "\033[1;36m\033[1;32m√\033[0m O Proxy Squid3 foi recarregado com sucesso! \033[0m"
			exit 1
		fi
	fi
fi
}

rdyclearcache(){
clear
echo " ";
sync; echo 3 > /proc/sys/vm/drop_caches
echo -e "\033[1;32mClear PageCache, dentries and inodes - Succefull! \033[0m";
}

if [[ $1 == "" ]]; then

clear

echo " ";

echo -e "\033[1;32m$about";
echo " ";

echo -e "\033[1;36mUSUÁRIO \033[0m";
echo " ";
echo -e "\033[1;32m [01] Criar usuário SSH \033[0m";
echo -e "\033[1;32m [02] Apagar usuário SSH \033[0m";
echo -e "\033[1;32m [03] Mudar limite de conexão para um usuário SSH\033[0m";
echo -e "\033[1;32m [04] Definir data de expiação para um usuário SSH \033[0m";
echo -e "\033[1;32m [05] Mudar senha de um usuário SSH \033[0m";
echo -e "\033[1;32m [06] Criar usuário temporário \033[0m";
echo -e "\033[1;32m [07] Mudar nome de um usuário SSH \033[0m";
echo -e "\033[1;32m [08] Apagar usuário expirados \033[0m";
echo -e "\033[1;32m [09] Remover limite de conexão de um usuário \033[0m";
echo -e "\033[1;32m [10] Detalhes dos usuários \033[0m";
echo " ";
echo -e "\033[1;36mSISTEMA \033[0m";
echo " ";
echo -e "\033[1;32m [11] Limpar cache e swap do sistema \033[0m";
echo -e "\033[1;32m [12] Detalhes do sistema - RAM, SWAP, KERNEL etc. \033[0m";
echo -e "\033[1;32m [13] Mudar senha root \033[0m";
echo -e "\033[1;32m [14] Reiniciar sistema \033[0m";
echo " ";
echo -e "\033[1;36mFERRAMENTAS \033[0m";
echo " ";
echo -e "\033[1;32m [15] SpeedTest - Medir velocidade de banda \033[0m";
echo -e "\033[1;32m [16] Monitorar usuários conectados \033[0m";
echo -e "\033[1;32m [17] Criar banner \033[0m";
echo -e "\033[1;32m [18] BadVPN - Para chamadas VOIP & streaming de vídeo \033[0m";
echo " ";
echo -e "\033[1;36mOUTRAS OPÇÕES \033[0m";
echo " ";
echo -e "\033[1;32m [19] Bloquear firewall - impedir uso de torrente através da rede \033[0m";
echo -e "\033[1;32m [20] Restaurar configurações de firewall \033[0m";
echo -e "\033[1;32m [21] Fazer backup de usuários \033[0m";
echo -e "\033[1;32m [22] Restaurar usuários de backup \033[0m";
echo -e "\033[1;32m [23] Adicionar Host - Útil na configuração OpenSSH \033[0m";
echo -e "\033[1;32m [24] Apagar Host \033[0m";
echo -e "\033[1;32m [25] Sair \033[0m";
echo -e "\033[1;36m[01-23]\033[0m"; read -p ": "  option

else
option=$1
fi

case $option in

1 | 01) rdyadduser ;;
2 | 02) rdydeleteuser ;;
3 | 03) rdychangelimit ;;
4 | 04) rdychangedate ;;
5 | 05) rdychangepass ;;
6 | 06) rdycreateusertest ;;
7 | 07) rdyusermanager ;;
8 | 08) rdydeleteexpiredusers ;;
9 | 09) rdynolimit ;;
10) rdyusersdetails ;;
11) rdyclearcache ;;
12) RDY 8 ;;
13) 
clear
echo -e "\033[1;36mNova senha para \033[4;32mroot\033[0m"
read -p ": " password
(echo $password; echo $password)|passwd root 2>/dev/null
echo -e "\033[1;36m\033[1;32m√\033[0m A nova senha do usuário \033[4;32mroot\033[0m é: \033[1;32m$password\033[0m" ;;
14) reboot ;;
15) RDY 6 ;;
16) rdymonitor ;;
17) rdybanner ;;
18) rdybadvpn ;;
19) rdyblockfirewall ;;
20) rdyresetfirewall ;;
21) rdybackup ;;
22) rdyrestorebackup ;;
23) rdyaddhost ;;
24) rdydeletehost ;;
25) exit ;;
 *) "Unknown option." ; echo "" ; sleep 2 ; bash RDY ;;
   esac
